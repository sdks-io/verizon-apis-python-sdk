# -*- coding: utf-8 -*-

"""
verizonthingspacequalityofserviceapiendpoints

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizonthingspacequalityofserviceapiendpoints.api_helper import APIHelper
from verizonthingspacequalityofserviceapiendpoints.models.device_id import DeviceId
from verizonthingspacequalityofserviceapiendpoints.models.flow_info import FlowInfo


class DeviceInfo(object):

    """Implementation of the 'DeviceInfo' model.

    TODO: type model description here.

    Attributes:
        device_id (DeviceId): device identifiers consisting of an ID value and
            what that value represents (kind)
        device_i_pv_6_addr (str): the IPv6 IP address of the device
        flow_info (List[FlowInfo]): The details of the data connection

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_id": 'deviceId',
        "device_i_pv_6_addr": 'deviceIPv6Addr',
        "flow_info": 'flowInfo'
    }

    _optionals = [
        'device_id',
        'device_i_pv_6_addr',
        'flow_info',
    ]

    def __init__(self,
                 device_id=APIHelper.SKIP,
                 device_i_pv_6_addr=APIHelper.SKIP,
                 flow_info=APIHelper.SKIP):
        """Constructor for the DeviceInfo class"""

        # Initialize members of the class
        if device_id is not APIHelper.SKIP:
            self.device_id = device_id 
        if device_i_pv_6_addr is not APIHelper.SKIP:
            self.device_i_pv_6_addr = device_i_pv_6_addr 
        if flow_info is not APIHelper.SKIP:
            self.flow_info = flow_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        device_id = DeviceId.from_dictionary(dictionary.get('deviceId')) if 'deviceId' in dictionary.keys() else APIHelper.SKIP
        device_i_pv_6_addr = dictionary.get("deviceIPv6Addr") if dictionary.get("deviceIPv6Addr") else APIHelper.SKIP
        flow_info = None
        if dictionary.get('flowInfo') is not None:
            flow_info = [FlowInfo.from_dictionary(x) for x in dictionary.get('flowInfo')]
        else:
            flow_info = APIHelper.SKIP
        # Return an object of this model
        return cls(device_id,
                   device_i_pv_6_addr,
                   flow_info)

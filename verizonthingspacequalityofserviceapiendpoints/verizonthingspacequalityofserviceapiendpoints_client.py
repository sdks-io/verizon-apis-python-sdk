# -*- coding: utf-8 -*-

"""
verizonthingspacequalityofserviceapiendpoints

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from verizonthingspacequalityofserviceapiendpoints.configuration import Configuration
from verizonthingspacequalityofserviceapiendpoints.controllers.base_controller import BaseController
from verizonthingspacequalityofserviceapiendpoints.configuration import Environment
from verizonthingspacequalityofserviceapiendpoints.http.auth.thingspace_oauth import ThingspaceOauth
from verizonthingspacequalityofserviceapiendpoints.http.auth.vz_m_2_m_session_token import VzM2mSessionToken
from verizonthingspacequalityofserviceapiendpoints.controllers.thing_space_quality_of_service_api_actions_controller\
    import ThingSpaceQualityOfServiceAPIActionsController
from verizonthingspacequalityofserviceapiendpoints.controllers.exclusions_controller\
    import ExclusionsController
from verizonthingspacequalityofserviceapiendpoints.controllers.o_auth_authorization_controller\
    import OAuthAuthorizationController


class VerizonthingspacequalityofserviceapiendpointsClient(object):
    @LazyProperty
    def thing_space_quality_of_service_api_actions(self):
        return ThingSpaceQualityOfServiceAPIActionsController(self.global_configuration)

    @LazyProperty
    def exclusions(self):
        return ExclusionsController(self.global_configuration)

    @LazyProperty
    def o_auth_authorization(self):
        return OAuthAuthorizationController(self.global_configuration)

    @property
    def thingspace_oauth(self):
        return self.auth_managers['thingspace_oauth']

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION,
                 thingspace_oauth_credentials=None,
                 vz_m_2_m_session_token_credentials=None,
                 vz_m_2_m_token='TODO: Replace', config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment,
            thingspace_oauth_credentials=thingspace_oauth_credentials,
            vz_m_2_m_session_token_credentials=vz_m_2_m_session_token_credentials,
            vz_m_2_m_token=vz_m_2_m_token)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())\
            .global_header('VZ-M2M-Token', self.config.vz_m_2_m_token)

        self.auth_managers = {key: None for key in ['thingspace_oauth',
                                                    'vz-m2m-session_token']}
        self.auth_managers['thingspace_oauth'] = ThingspaceOauth(
            self.config.thingspace_oauth_credentials, self.global_configuration)
        self.auth_managers['vz-m2m-session_token'] = VzM2mSessionToken(
            self.config.vz_m_2_m_session_token_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)


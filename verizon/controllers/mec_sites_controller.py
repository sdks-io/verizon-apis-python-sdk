# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.http.api_response import ApiResponse
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from verizon.models.mec_site_locations_result import MECSiteLocationsResult
from verizon.models.clusters_namespaces import ClustersNamespaces
from verizon.exceptions.edge_service_launch_result_exception import EdgeServiceLaunchResultException


class MECSitesController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(MECSitesController, self).__init__(config)

    def list_mec_site_locations(self,
                                account_name=None):
        """Does a GET request to /v1/mecsite/locations.

        Supports fetching MEC locations so the user can view the city.

        Args:
            account_name (string, optional): User account name.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Returns
                information related to MEC site locations.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVICES)
            .path('/v1/mecsite/locations')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MECSiteLocationsResult.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Error Response.', EdgeServiceLaunchResultException)
        ).execute()

    def list_ern_cluster_namespaces(self,
                                    user_id,
                                    role,
                                    customer_id,
                                    request_id,
                                    ern=None,
                                    name=None,
                                    offset=None,
                                    limit=None,
                                    correlation_id=None,
                                    cluster_state=None):
        """Does a GET request to /v1/platform/clusters.

        Retrieve all clusters for the customer.

        Args:
            user_id (string): TODO: type description here.
            role (string): TODO: type description here.
            customer_id (string): TODO: type description here.
            request_id (string): TODO: type description here.
            ern (string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            offset (string, optional): TODO: type description here.
            limit (string, optional): TODO: type description here.
            correlation_id (string, optional): TODO: type description here.
            cluster_state (ClusterStateEnum, optional): TODO: type description
                here.

        Returns:
            ApiResponse: An object with the response value as well as other
                useful information such as status codes and headers. Clusters
                namespaces.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVICES)
            .path('/v1/platform/clusters')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('userId')
                          .value(user_id))
            .header_param(Parameter()
                          .key('role')
                          .value(role))
            .header_param(Parameter()
                          .key('customerId')
                          .value(customer_id))
            .header_param(Parameter()
                          .key('requestId')
                          .value(request_id))
            .query_param(Parameter()
                         .key('ERN')
                         .value(ern))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .query_param(Parameter()
                         .key('cluster_state')
                         .value(cluster_state))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ClustersNamespaces.from_dictionary)
            .is_api_response(True)
            .local_error('400', 'Bad Request.', EdgeServiceLaunchResultException)
            .local_error('404', 'Not found.', EdgeServiceLaunchResultException)
            .local_error('500', 'Internal Server Error.', EdgeServiceLaunchResultException)
            .local_error('default', 'Unexpected error.', EdgeServiceLaunchResultException)
        ).execute()

# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class NodeStatusInfo(object):

    """Implementation of the 'NodeStatusInfo' model.

    TODO: type model description here.

    Attributes:
        machine_id (string): TODO: type description here.
        system_uuid (string): TODO: type description here.
        boot_id (string): TODO: type description here.
        kernel_version (string): TODO: type description here.
        os_image (string): TODO: type description here.
        container_runtime_version (string): TODO: type description here.
        kubelet_version (string): TODO: type description here.
        kube_proxy_version (string): TODO: type description here.
        operating_system (string): TODO: type description here.
        architecture (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "machine_id": 'machineID',
        "system_uuid": 'systemUUID',
        "boot_id": 'bootID',
        "kernel_version": 'kernelVersion',
        "os_image": 'osImage',
        "container_runtime_version": 'containerRuntimeVersion',
        "kubelet_version": 'kubeletVersion',
        "kube_proxy_version": 'kubeProxyVersion',
        "operating_system": 'operatingSystem',
        "architecture": 'architecture'
    }

    _optionals = [
        'machine_id',
        'system_uuid',
        'boot_id',
        'kernel_version',
        'os_image',
        'container_runtime_version',
        'kubelet_version',
        'kube_proxy_version',
        'operating_system',
        'architecture',
    ]

    def __init__(self,
                 machine_id=APIHelper.SKIP,
                 system_uuid=APIHelper.SKIP,
                 boot_id=APIHelper.SKIP,
                 kernel_version=APIHelper.SKIP,
                 os_image=APIHelper.SKIP,
                 container_runtime_version=APIHelper.SKIP,
                 kubelet_version=APIHelper.SKIP,
                 kube_proxy_version=APIHelper.SKIP,
                 operating_system=APIHelper.SKIP,
                 architecture=APIHelper.SKIP):
        """Constructor for the NodeStatusInfo class"""

        # Initialize members of the class
        if machine_id is not APIHelper.SKIP:
            self.machine_id = machine_id 
        if system_uuid is not APIHelper.SKIP:
            self.system_uuid = system_uuid 
        if boot_id is not APIHelper.SKIP:
            self.boot_id = boot_id 
        if kernel_version is not APIHelper.SKIP:
            self.kernel_version = kernel_version 
        if os_image is not APIHelper.SKIP:
            self.os_image = os_image 
        if container_runtime_version is not APIHelper.SKIP:
            self.container_runtime_version = container_runtime_version 
        if kubelet_version is not APIHelper.SKIP:
            self.kubelet_version = kubelet_version 
        if kube_proxy_version is not APIHelper.SKIP:
            self.kube_proxy_version = kube_proxy_version 
        if operating_system is not APIHelper.SKIP:
            self.operating_system = operating_system 
        if architecture is not APIHelper.SKIP:
            self.architecture = architecture 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        machine_id = dictionary.get("machineID") if dictionary.get("machineID") else APIHelper.SKIP
        system_uuid = dictionary.get("systemUUID") if dictionary.get("systemUUID") else APIHelper.SKIP
        boot_id = dictionary.get("bootID") if dictionary.get("bootID") else APIHelper.SKIP
        kernel_version = dictionary.get("kernelVersion") if dictionary.get("kernelVersion") else APIHelper.SKIP
        os_image = dictionary.get("osImage") if dictionary.get("osImage") else APIHelper.SKIP
        container_runtime_version = dictionary.get("containerRuntimeVersion") if dictionary.get("containerRuntimeVersion") else APIHelper.SKIP
        kubelet_version = dictionary.get("kubeletVersion") if dictionary.get("kubeletVersion") else APIHelper.SKIP
        kube_proxy_version = dictionary.get("kubeProxyVersion") if dictionary.get("kubeProxyVersion") else APIHelper.SKIP
        operating_system = dictionary.get("operatingSystem") if dictionary.get("operatingSystem") else APIHelper.SKIP
        architecture = dictionary.get("architecture") if dictionary.get("architecture") else APIHelper.SKIP
        # Return an object of this model
        return cls(machine_id,
                   system_uuid,
                   boot_id,
                   kernel_version,
                   os_image,
                   container_runtime_version,
                   kubelet_version,
                   kube_proxy_version,
                   operating_system,
                   architecture)

# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.cluster_infra import ClusterInfra
from verizon.models.cluster_metadata import ClusterMetadata
from verizon.models.edge_service_launch_params import EdgeServiceLaunchParams
from verizon.models.edge_service_workload import EdgeServiceWorkload
from verizon.models.eds_discovery_intent import EdsDiscoveryIntent
from verizon.models.region_item import RegionItem
from verizon.models.revision import Revision
from verizon.models.virtual_machine import VirtualMachine


class ServiceInstance(object):

    """Implementation of the 'ServiceInstance' model.

    TODO: type model description here.

    Attributes:
        id (string): Instance UUID generated by OF.
        name (string): User display name for Service Instance Id.
        service_name (string): Name of the Service.
        created_at (datetime): Auto derived time of creation.
        modified_at (datetime): Last modified time.
        labels (EdgeServiceLaunchParams): TODO: type description here.
        project_name (string): Name of the service Instance Project(Project
            Name).
        revision (Revision): TODO: type description here.
        name_space (string): Name space inside cluster.
        deployment_type (DeploymentTypeEnum): Default MEC platform for
            deploying service.
        solution_regulations (list of RegionItem): TODO: type description
            here.
        eds_discovery_intent (EdsDiscoveryIntent): TODO: type description
            here.
        work_load_type (WorkloadTypeEnum): Default service type.
        cluster_info (ClusterMetadata): TODO: type description here.
        virtual_machine_info (VirtualMachine): TODO: type description here.
        workload (list of EdgeServiceWorkload): TODO: type description here.
        rafay_cluster_infra (ClusterInfra): TODO: type description here.
        customer_id (string): Id of particular customer.
        user_id (string): Id of a user.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "revision": 'revision',
        "id": 'id',
        "service_name": 'serviceName',
        "created_at": 'createdAt',
        "modified_at": 'modifiedAt',
        "labels": 'labels',
        "project_name": 'projectName',
        "name_space": 'nameSpace',
        "deployment_type": 'deploymentType',
        "solution_regulations": 'solutionRegulations',
        "eds_discovery_intent": 'edsDiscoveryIntent',
        "work_load_type": 'workLoadType',
        "cluster_info": 'clusterInfo',
        "virtual_machine_info": 'virtualMachineInfo',
        "workload": 'workload',
        "rafay_cluster_infra": 'rafayClusterInfra',
        "customer_id": 'customerId',
        "user_id": 'userId'
    }

    _optionals = [
        'id',
        'service_name',
        'created_at',
        'modified_at',
        'labels',
        'project_name',
        'name_space',
        'deployment_type',
        'solution_regulations',
        'eds_discovery_intent',
        'work_load_type',
        'cluster_info',
        'virtual_machine_info',
        'workload',
        'rafay_cluster_infra',
        'customer_id',
        'user_id',
    ]

    def __init__(self,
                 name=None,
                 revision=None,
                 id=APIHelper.SKIP,
                 service_name=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 labels=APIHelper.SKIP,
                 project_name='default',
                 name_space='default',
                 deployment_type='PrivateMEC',
                 solution_regulations=APIHelper.SKIP,
                 eds_discovery_intent=APIHelper.SKIP,
                 work_load_type='container',
                 cluster_info=APIHelper.SKIP,
                 virtual_machine_info=APIHelper.SKIP,
                 workload=APIHelper.SKIP,
                 rafay_cluster_infra=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 user_id=APIHelper.SKIP):
        """Constructor for the ServiceInstance class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        self.name = name 
        if service_name is not APIHelper.SKIP:
            self.service_name = service_name 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        if modified_at is not APIHelper.SKIP:
            self.modified_at = APIHelper.RFC3339DateTime(modified_at) if modified_at else None 
        if labels is not APIHelper.SKIP:
            self.labels = labels 
        self.project_name = project_name 
        self.revision = revision 
        self.name_space = name_space 
        self.deployment_type = deployment_type 
        if solution_regulations is not APIHelper.SKIP:
            self.solution_regulations = solution_regulations 
        if eds_discovery_intent is not APIHelper.SKIP:
            self.eds_discovery_intent = eds_discovery_intent 
        self.work_load_type = work_load_type 
        if cluster_info is not APIHelper.SKIP:
            self.cluster_info = cluster_info 
        if virtual_machine_info is not APIHelper.SKIP:
            self.virtual_machine_info = virtual_machine_info 
        if workload is not APIHelper.SKIP:
            self.workload = workload 
        if rafay_cluster_infra is not APIHelper.SKIP:
            self.rafay_cluster_infra = rafay_cluster_infra 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if user_id is not APIHelper.SKIP:
            self.user_id = user_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else None
        revision = Revision.from_dictionary(dictionary.get('revision')) if dictionary.get('revision') else None
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        service_name = dictionary.get("serviceName") if dictionary.get("serviceName") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else APIHelper.SKIP
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modifiedAt")).datetime if dictionary.get("modifiedAt") else APIHelper.SKIP
        labels = EdgeServiceLaunchParams.from_dictionary(dictionary.get('labels')) if 'labels' in dictionary.keys() else APIHelper.SKIP
        project_name = dictionary.get("projectName") if dictionary.get("projectName") else 'default'
        name_space = dictionary.get("nameSpace") if dictionary.get("nameSpace") else 'default'
        deployment_type = dictionary.get("deploymentType") if dictionary.get("deploymentType") else 'PrivateMEC'
        solution_regulations = None
        if dictionary.get('solutionRegulations') is not None:
            solution_regulations = [RegionItem.from_dictionary(x) for x in dictionary.get('solutionRegulations')]
        else:
            solution_regulations = APIHelper.SKIP
        eds_discovery_intent = EdsDiscoveryIntent.from_dictionary(dictionary.get('edsDiscoveryIntent')) if 'edsDiscoveryIntent' in dictionary.keys() else APIHelper.SKIP
        work_load_type = dictionary.get("workLoadType") if dictionary.get("workLoadType") else 'container'
        cluster_info = ClusterMetadata.from_dictionary(dictionary.get('clusterInfo')) if 'clusterInfo' in dictionary.keys() else APIHelper.SKIP
        virtual_machine_info = VirtualMachine.from_dictionary(dictionary.get('virtualMachineInfo')) if 'virtualMachineInfo' in dictionary.keys() else APIHelper.SKIP
        workload = None
        if dictionary.get('workload') is not None:
            workload = [EdgeServiceWorkload.from_dictionary(x) for x in dictionary.get('workload')]
        else:
            workload = APIHelper.SKIP
        rafay_cluster_infra = ClusterInfra.from_dictionary(dictionary.get('rafayClusterInfra')) if 'rafayClusterInfra' in dictionary.keys() else APIHelper.SKIP
        customer_id = dictionary.get("customerId") if dictionary.get("customerId") else APIHelper.SKIP
        user_id = dictionary.get("userId") if dictionary.get("userId") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   revision,
                   id,
                   service_name,
                   created_at,
                   modified_at,
                   labels,
                   project_name,
                   name_space,
                   deployment_type,
                   solution_regulations,
                   eds_discovery_intent,
                   work_load_type,
                   cluster_info,
                   virtual_machine_info,
                   workload,
                   rafay_cluster_infra,
                   customer_id,
                   user_id)

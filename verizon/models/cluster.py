# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.cluster_spec import ClusterSpec
from verizon.models.cluster_status import ClusterStatus
from verizon.models.metadata import Metadata


class Cluster(object):

    """Implementation of the 'Cluster' model.

    TODO: type model description here.

    Attributes:
        api_version (string): TODO: type description here.
        kind (string): TODO: type description here.
        metadata (Metadata): TODO: type description here.
        spec (ClusterSpec): TODO: type description here.
        status (ClusterStatus): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "api_version": 'apiVersion',
        "kind": 'kind',
        "metadata": 'metadata',
        "spec": 'spec',
        "status": 'status'
    }

    _optionals = [
        'api_version',
        'kind',
        'metadata',
        'spec',
        'status',
    ]

    def __init__(self,
                 api_version=APIHelper.SKIP,
                 kind=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 spec=APIHelper.SKIP,
                 status=APIHelper.SKIP):
        """Constructor for the Cluster class"""

        # Initialize members of the class
        if api_version is not APIHelper.SKIP:
            self.api_version = api_version 
        if kind is not APIHelper.SKIP:
            self.kind = kind 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if spec is not APIHelper.SKIP:
            self.spec = spec 
        if status is not APIHelper.SKIP:
            self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        api_version = dictionary.get("apiVersion") if dictionary.get("apiVersion") else APIHelper.SKIP
        kind = dictionary.get("kind") if dictionary.get("kind") else APIHelper.SKIP
        metadata = Metadata.from_dictionary(dictionary.get('metadata')) if 'metadata' in dictionary.keys() else APIHelper.SKIP
        spec = ClusterSpec.from_dictionary(dictionary.get('spec')) if 'spec' in dictionary.keys() else APIHelper.SKIP
        status = ClusterStatus.from_dictionary(dictionary.get('status')) if 'status' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(api_version,
                   kind,
                   metadata,
                   spec,
                   status)

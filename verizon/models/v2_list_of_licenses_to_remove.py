# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class V2ListOfLicensesToRemove(object):

    """Implementation of the 'V2ListOfLicensesToRemove' model.

    A list of license cancellation candidate devices.

    Attributes:
        count (int): Cancellation candidate devices count.
        has_more_data (bool): Flag to indicat more devices.
        update_time (string): Last update time.
        device_list (list of string): Device IMEI list.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "count": 'count',
        "has_more_data": 'hasMoreData',
        "update_time": 'updateTime',
        "device_list": 'deviceList'
    }

    def __init__(self,
                 count=None,
                 has_more_data=None,
                 update_time=None,
                 device_list=None):
        """Constructor for the V2ListOfLicensesToRemove class"""

        # Initialize members of the class
        self.count = count 
        self.has_more_data = has_more_data 
        self.update_time = update_time 
        self.device_list = device_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        count = dictionary.get("count") if dictionary.get("count") else None
        has_more_data = dictionary.get("hasMoreData") if "hasMoreData" in dictionary.keys() else None
        update_time = dictionary.get("updateTime") if dictionary.get("updateTime") else None
        device_list = dictionary.get("deviceList") if dictionary.get("deviceList") else None
        # Return an object of this model
        return cls(count,
                   has_more_data,
                   update_time,
                   device_list)

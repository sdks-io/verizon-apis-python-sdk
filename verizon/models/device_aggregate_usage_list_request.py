# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.device_id import DeviceId


class DeviceAggregateUsageListRequest(object):

    """Implementation of the 'DeviceAggregateUsageListRequest' model.

    Request to list device aggregate usage.

    Attributes:
        device_ids (list of DeviceId): One or more devices for which you want
            aggregate data, specified by device ID.
        account_name (string): The name of a billing account.
        group_name (string): The name of a device group, if you want to only
            include devices in that group.
        start_time (string): The beginning of the reporting period. The
            startTime cannot be more than 6 months before the current date.
        end_time (string): The end of the reporting period. The endTime date
            must be within on month of the startTime date.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "device_ids": 'deviceIds',
        "account_name": 'accountName',
        "group_name": 'groupName',
        "start_time": 'startTime',
        "end_time": 'endTime'
    }

    _optionals = [
        'device_ids',
        'account_name',
        'group_name',
        'start_time',
        'end_time',
    ]

    def __init__(self,
                 device_ids=APIHelper.SKIP,
                 account_name=APIHelper.SKIP,
                 group_name=APIHelper.SKIP,
                 start_time=APIHelper.SKIP,
                 end_time=APIHelper.SKIP):
        """Constructor for the DeviceAggregateUsageListRequest class"""

        # Initialize members of the class
        if device_ids is not APIHelper.SKIP:
            self.device_ids = device_ids 
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if group_name is not APIHelper.SKIP:
            self.group_name = group_name 
        if start_time is not APIHelper.SKIP:
            self.start_time = start_time 
        if end_time is not APIHelper.SKIP:
            self.end_time = end_time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        device_ids = None
        if dictionary.get('deviceIds') is not None:
            device_ids = [DeviceId.from_dictionary(x) for x in dictionary.get('deviceIds')]
        else:
            device_ids = APIHelper.SKIP
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        group_name = dictionary.get("groupName") if dictionary.get("groupName") else APIHelper.SKIP
        start_time = dictionary.get("startTime") if dictionary.get("startTime") else APIHelper.SKIP
        end_time = dictionary.get("endTime") if dictionary.get("endTime") else APIHelper.SKIP
        # Return an object of this model
        return cls(device_ids,
                   account_name,
                   group_name,
                   start_time,
                   end_time)

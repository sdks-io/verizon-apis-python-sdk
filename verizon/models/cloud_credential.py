# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.cluster_provisioning import ClusterProvisioning
from verizon.models.data_backup import DataBackup


class CloudCredential(object):

    """Implementation of the 'CloudCredential' model.

    TODO: type model description here.

    Attributes:
        name (string): Name of the credentials.
        cluster_provisioning (ClusterProvisioning): TODO: type description
            here.
        data_backup (DataBackup): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "cluster_provisioning": 'clusterProvisioning',
        "data_backup": 'dataBackup'
    }

    _optionals = [
        'name',
        'cluster_provisioning',
        'data_backup',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 cluster_provisioning=APIHelper.SKIP,
                 data_backup=APIHelper.SKIP):
        """Constructor for the CloudCredential class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if cluster_provisioning is not APIHelper.SKIP:
            self.cluster_provisioning = cluster_provisioning 
        if data_backup is not APIHelper.SKIP:
            self.data_backup = data_backup 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        cluster_provisioning = ClusterProvisioning.from_dictionary(dictionary.get('clusterProvisioning')) if 'clusterProvisioning' in dictionary.keys() else APIHelper.SKIP
        data_backup = DataBackup.from_dictionary(dictionary.get('dataBackup')) if 'dataBackup' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   cluster_provisioning,
                   data_backup)

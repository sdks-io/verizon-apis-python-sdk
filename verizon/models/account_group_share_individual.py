# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.action_account_group_share import ActionAccountGroupShare
from verizon.models.condition_account_group_share import ConditionAccountGroupShare
from verizon.models.filter_criteria_account_group_share import FilterCriteriaAccountGroupShare


class AccountGroupShareIndividual(object):

    """Implementation of the 'AccountGroupShareIndividual' model.

    TODO: type model description here.

    Attributes:
        filter_criteria (FilterCriteriaAccountGroupShare): TODO: type
            description here.
        condition (ConditionAccountGroupShare): TODO: type description here.
        action (ActionAccountGroupShare): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "filter_criteria": 'filterCriteria',
        "condition": 'condition',
        "action": 'action'
    }

    _optionals = [
        'filter_criteria',
        'condition',
        'action',
    ]

    def __init__(self,
                 filter_criteria=APIHelper.SKIP,
                 condition=APIHelper.SKIP,
                 action=APIHelper.SKIP):
        """Constructor for the AccountGroupShareIndividual class"""

        # Initialize members of the class
        if filter_criteria is not APIHelper.SKIP:
            self.filter_criteria = filter_criteria 
        if condition is not APIHelper.SKIP:
            self.condition = condition 
        if action is not APIHelper.SKIP:
            self.action = action 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        filter_criteria = FilterCriteriaAccountGroupShare.from_dictionary(dictionary.get('filterCriteria')) if 'filterCriteria' in dictionary.keys() else APIHelper.SKIP
        condition = ConditionAccountGroupShare.from_dictionary(dictionary.get('condition')) if 'condition' in dictionary.keys() else APIHelper.SKIP
        action = ActionAccountGroupShare.from_dictionary(dictionary.get('action')) if 'action' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(filter_criteria,
                   condition,
                   action)

# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.intent_chain_item import IntentChainItem


class PlacementIntents(object):

    """Implementation of the 'PlacementIntents' model.

    TODO: type model description here.

    Attributes:
        is_placement_at_launch_enabled (bool): TODO: type description here.
        group_id (string): TODO: type description here.
        intent_chain (list of IntentChainItem): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_placement_at_launch_enabled": 'isPlacementAtLaunchEnabled',
        "group_id": 'groupId',
        "intent_chain": 'intentChain'
    }

    _optionals = [
        'is_placement_at_launch_enabled',
        'group_id',
        'intent_chain',
    ]

    def __init__(self,
                 is_placement_at_launch_enabled=False,
                 group_id=APIHelper.SKIP,
                 intent_chain=APIHelper.SKIP):
        """Constructor for the PlacementIntents class"""

        # Initialize members of the class
        self.is_placement_at_launch_enabled = is_placement_at_launch_enabled 
        if group_id is not APIHelper.SKIP:
            self.group_id = group_id 
        if intent_chain is not APIHelper.SKIP:
            self.intent_chain = intent_chain 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        is_placement_at_launch_enabled = dictionary.get("isPlacementAtLaunchEnabled") if dictionary.get("isPlacementAtLaunchEnabled") else False
        group_id = dictionary.get("groupId") if dictionary.get("groupId") else APIHelper.SKIP
        intent_chain = None
        if dictionary.get('intentChain') is not None:
            intent_chain = [IntentChainItem.from_dictionary(x) for x in dictionary.get('intentChain')]
        else:
            intent_chain = APIHelper.SKIP
        # Return an object of this model
        return cls(is_placement_at_launch_enabled,
                   group_id,
                   intent_chain)

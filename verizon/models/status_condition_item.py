# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class StatusConditionItem(object):

    """Implementation of the 'StatusConditionItem' model.

    TODO: type model description here.

    Attributes:
        mtype (string): TODO: type description here.
        status (string): TODO: type description here.
        last_heartbeat_time (datetime): TODO: type description here.
        last_transition_time (datetime): TODO: type description here.
        reason (string): TODO: type description here.
        message (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "status": 'status',
        "last_heartbeat_time": 'lastHeartbeatTime',
        "last_transition_time": 'lastTransitionTime',
        "reason": 'reason',
        "message": 'message'
    }

    _optionals = [
        'mtype',
        'status',
        'last_heartbeat_time',
        'last_transition_time',
        'reason',
        'message',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 last_heartbeat_time=APIHelper.SKIP,
                 last_transition_time=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 message=APIHelper.SKIP):
        """Constructor for the StatusConditionItem class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if status is not APIHelper.SKIP:
            self.status = status 
        if last_heartbeat_time is not APIHelper.SKIP:
            self.last_heartbeat_time = APIHelper.RFC3339DateTime(last_heartbeat_time) if last_heartbeat_time else None 
        if last_transition_time is not APIHelper.SKIP:
            self.last_transition_time = APIHelper.RFC3339DateTime(last_transition_time) if last_transition_time else None 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if message is not APIHelper.SKIP:
            self.message = message 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        last_heartbeat_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastHeartbeatTime")).datetime if dictionary.get("lastHeartbeatTime") else APIHelper.SKIP
        last_transition_time = APIHelper.RFC3339DateTime.from_value(dictionary.get("lastTransitionTime")).datetime if dictionary.get("lastTransitionTime") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   status,
                   last_heartbeat_time,
                   last_transition_time,
                   reason,
                   message)

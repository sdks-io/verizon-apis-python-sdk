# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.extended_attribute import ExtendedAttribute


class DailyUsageHistory(object):

    """Implementation of the 'DailyUsageHistory' model.

    TODO: type model description here.

    Attributes:
        bytes_used (str): the total data usage recorded in Bytes
        extended_attributes (List[ExtendedAttribute]): TODO: type description
            here.
        service_plan (str): TODO: type description here.
        sms_used (str): The total number of SMS messages from and to the device
        source (str): Where the collected data is being gathered from
        timestamp (str): Timestamp of when the retrieved record was completed
            ($datetime)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bytes_used": 'bytesUsed',
        "extended_attributes": 'extendedAttributes',
        "service_plan": 'servicePlan',
        "sms_used": 'smsUsed',
        "source": 'source',
        "timestamp": 'timestamp'
    }

    _optionals = [
        'bytes_used',
        'extended_attributes',
        'service_plan',
        'sms_used',
        'source',
        'timestamp',
    ]

    def __init__(self,
                 bytes_used=APIHelper.SKIP,
                 extended_attributes=APIHelper.SKIP,
                 service_plan=APIHelper.SKIP,
                 sms_used=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 timestamp=APIHelper.SKIP):
        """Constructor for the DailyUsageHistory class"""

        # Initialize members of the class
        if bytes_used is not APIHelper.SKIP:
            self.bytes_used = bytes_used 
        if extended_attributes is not APIHelper.SKIP:
            self.extended_attributes = extended_attributes 
        if service_plan is not APIHelper.SKIP:
            self.service_plan = service_plan 
        if sms_used is not APIHelper.SKIP:
            self.sms_used = sms_used 
        if source is not APIHelper.SKIP:
            self.source = source 
        if timestamp is not APIHelper.SKIP:
            self.timestamp = timestamp 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        bytes_used = dictionary.get("bytesUsed") if dictionary.get("bytesUsed") else APIHelper.SKIP
        extended_attributes = None
        if dictionary.get('extendedAttributes') is not None:
            extended_attributes = [ExtendedAttribute.from_dictionary(x) for x in dictionary.get('extendedAttributes')]
        else:
            extended_attributes = APIHelper.SKIP
        service_plan = dictionary.get("servicePlan") if dictionary.get("servicePlan") else APIHelper.SKIP
        sms_used = dictionary.get("smsUsed") if dictionary.get("smsUsed") else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        timestamp = dictionary.get("timestamp") if dictionary.get("timestamp") else APIHelper.SKIP
        # Return an object of this model
        return cls(bytes_used,
                   extended_attributes,
                   service_plan,
                   sms_used,
                   source,
                   timestamp)

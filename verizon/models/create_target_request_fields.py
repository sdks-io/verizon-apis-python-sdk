# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.fields_http_headers import FieldsHttpHeaders


class CreateTargetRequestFields(object):

    """Implementation of the 'CreateTargetRequestFields' model.

    TODO: type model description here.

    Attributes:
        httpheaders (FieldsHttpHeaders): TODO: type description here.
        devicetypes (list of string): List of device types.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "httpheaders": 'httpheaders',
        "devicetypes": 'devicetypes'
    }

    _optionals = [
        'httpheaders',
        'devicetypes',
    ]

    def __init__(self,
                 httpheaders=APIHelper.SKIP,
                 devicetypes=APIHelper.SKIP):
        """Constructor for the CreateTargetRequestFields class"""

        # Initialize members of the class
        if httpheaders is not APIHelper.SKIP:
            self.httpheaders = httpheaders 
        if devicetypes is not APIHelper.SKIP:
            self.devicetypes = devicetypes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        httpheaders = FieldsHttpHeaders.from_dictionary(dictionary.get('httpheaders')) if 'httpheaders' in dictionary.keys() else APIHelper.SKIP
        devicetypes = dictionary.get("devicetypes") if dictionary.get("devicetypes") else APIHelper.SKIP
        # Return an object of this model
        return cls(httpheaders,
                   devicetypes)

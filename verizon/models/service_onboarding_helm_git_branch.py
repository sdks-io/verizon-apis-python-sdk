# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class ServiceOnboardingHelmGitBranch(object):

    """Implementation of the 'ServiceOnboardingHelmGitBranch' model.

    TODO: type model description here.

    Attributes:
        branch_name (string): The user can provide branchName for the Helm
            chart.
        helm_chart_path (string): The user can provide the path to the Helm
            chart.
        values_yaml_paths (list of string): The user can provide an array of
            values.YAML files paths.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "branch_name": 'branchName',
        "helm_chart_path": 'helmChartPath',
        "values_yaml_paths": 'valuesYamlPaths'
    }

    _optionals = [
        'values_yaml_paths',
    ]

    def __init__(self,
                 branch_name=None,
                 helm_chart_path=None,
                 values_yaml_paths=APIHelper.SKIP):
        """Constructor for the ServiceOnboardingHelmGitBranch class"""

        # Initialize members of the class
        self.branch_name = branch_name 
        self.helm_chart_path = helm_chart_path 
        if values_yaml_paths is not APIHelper.SKIP:
            self.values_yaml_paths = values_yaml_paths 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        branch_name = dictionary.get("branchName") if dictionary.get("branchName") else None
        helm_chart_path = dictionary.get("helmChartPath") if dictionary.get("helmChartPath") else None
        values_yaml_paths = dictionary.get("valuesYamlPaths") if dictionary.get("valuesYamlPaths") else APIHelper.SKIP
        # Return an object of this model
        return cls(branch_name,
                   helm_chart_path,
                   values_yaml_paths)

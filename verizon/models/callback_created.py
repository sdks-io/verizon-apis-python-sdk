# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class CallbackCreated(object):

    """Implementation of the 'CallbackCreated' model.

    TODO: type model description here.

    Attributes:
        aname (string): The billing account number for which callback messages
            will be sent.
        name (string): The name of the callback service, which identifies the
            type and format of messages that will be sent to the registered
            URL.
        url (string): The address of the callback listening service where the
            ThingSpace Platform will send callback messages for the service
            type.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aname": 'aname',
        "name": 'name',
        "url": 'url'
    }

    _optionals = [
        'url',
    ]

    def __init__(self,
                 aname=None,
                 name=None,
                 url=APIHelper.SKIP):
        """Constructor for the CallbackCreated class"""

        # Initialize members of the class
        self.aname = aname 
        self.name = name 
        if url is not APIHelper.SKIP:
            self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        aname = dictionary.get("aname") if dictionary.get("aname") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        # Return an object of this model
        return cls(aname,
                   name,
                   url)

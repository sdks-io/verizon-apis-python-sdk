# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class DeviceIdSearch(object):

    """Implementation of the 'DeviceIdSearch' model.

    Search by device id.

    Attributes:
        contains (string): The string appears anywhere in the identifer.
        startswith (string): The identifer must start with the specified
            string.
        endswith (string): The identifier must end with the specified string.
        kind (string): The type of the device identifier to match. Valid types
            of identifiers are:EID,ESN,ICCID,IMEI,MDN,MEID,MSISDN.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "kind": 'kind',
        "contains": 'contains',
        "startswith": 'startswith',
        "endswith": 'endswith'
    }

    _optionals = [
        'contains',
        'startswith',
        'endswith',
    ]

    def __init__(self,
                 kind=None,
                 contains=APIHelper.SKIP,
                 startswith=APIHelper.SKIP,
                 endswith=APIHelper.SKIP):
        """Constructor for the DeviceIdSearch class"""

        # Initialize members of the class
        if contains is not APIHelper.SKIP:
            self.contains = contains 
        if startswith is not APIHelper.SKIP:
            self.startswith = startswith 
        if endswith is not APIHelper.SKIP:
            self.endswith = endswith 
        self.kind = kind 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        kind = dictionary.get("kind") if dictionary.get("kind") else None
        contains = dictionary.get("contains") if dictionary.get("contains") else APIHelper.SKIP
        startswith = dictionary.get("startswith") if dictionary.get("startswith") else APIHelper.SKIP
        endswith = dictionary.get("endswith") if dictionary.get("endswith") else APIHelper.SKIP
        # Return an object of this model
        return cls(kind,
                   contains,
                   startswith,
                   endswith)

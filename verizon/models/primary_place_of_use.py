# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.address import Address
from verizon.models.customer_name import CustomerName


class PrimaryPlaceOfUse(object):

    """Implementation of the 'PrimaryPlaceOfUse' model.

    TODO: type model description here.

    Attributes:
        customer_name (list of CustomerName): TODO: type description here.
        address (list of Address): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer_name": 'customerName',
        "address": 'address'
    }

    _optionals = [
        'customer_name',
        'address',
    ]

    def __init__(self,
                 customer_name=APIHelper.SKIP,
                 address=APIHelper.SKIP):
        """Constructor for the PrimaryPlaceOfUse class"""

        # Initialize members of the class
        if customer_name is not APIHelper.SKIP:
            self.customer_name = customer_name 
        if address is not APIHelper.SKIP:
            self.address = address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        customer_name = None
        if dictionary.get('customerName') is not None:
            customer_name = [CustomerName.from_dictionary(x) for x in dictionary.get('customerName')]
        else:
            customer_name = APIHelper.SKIP
        address = None
        if dictionary.get('address') is not None:
            address = [Address.from_dictionary(x) for x in dictionary.get('address')]
        else:
            address = APIHelper.SKIP
        # Return an object of this model
        return cls(customer_name,
                   address)

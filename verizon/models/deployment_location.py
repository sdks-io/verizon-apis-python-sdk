# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.deployment_location_cluster import DeploymentLocationCluster
from verizon.models.deployment_location_namespace import DeploymentLocationNamespace


class DeploymentLocation(object):

    """Implementation of the 'DeploymentLocation' model.

    TODO: type model description here.

    Attributes:
        ern (string): Edge Resource Number.
        cluster (DeploymentLocationCluster): TODO: type description here.
        namespace (DeploymentLocationNamespace): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ern": 'ern',
        "cluster": 'cluster',
        "namespace": 'namespace'
    }

    _optionals = [
        'ern',
        'cluster',
        'namespace',
    ]

    def __init__(self,
                 ern=APIHelper.SKIP,
                 cluster=APIHelper.SKIP,
                 namespace=APIHelper.SKIP):
        """Constructor for the DeploymentLocation class"""

        # Initialize members of the class
        if ern is not APIHelper.SKIP:
            self.ern = ern 
        if cluster is not APIHelper.SKIP:
            self.cluster = cluster 
        if namespace is not APIHelper.SKIP:
            self.namespace = namespace 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ern = dictionary.get("ern") if dictionary.get("ern") else APIHelper.SKIP
        cluster = DeploymentLocationCluster.from_dictionary(dictionary.get('cluster')) if 'cluster' in dictionary.keys() else APIHelper.SKIP
        namespace = DeploymentLocationNamespace.from_dictionary(dictionary.get('namespace')) if 'namespace' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(ern,
                   cluster,
                   namespace)

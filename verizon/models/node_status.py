# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.ip import IP
from verizon.models.node_status_allocatable import NodeStatusAllocatable
from verizon.models.node_status_allocated import NodeStatusAllocated
from verizon.models.node_status_capacity import NodeStatusCapacity
from verizon.models.node_status_info import NodeStatusInfo
from verizon.models.status_condition_item import StatusConditionItem


class NodeStatus(object):

    """Implementation of the 'NodeStatus' model.

    TODO: type model description here.

    Attributes:
        state (string): TODO: type description here.
        conditions (list of StatusConditionItem): TODO: type description
            here.
        node_info (NodeStatusInfo): TODO: type description here.
        capacity (NodeStatusCapacity): TODO: type description here.
        allocatable (NodeStatusAllocatable): TODO: type description here.
        allocated (NodeStatusAllocated): TODO: type description here.
        ips (list of IP): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "state": 'state',
        "conditions": 'conditions',
        "node_info": 'nodeInfo',
        "capacity": 'capacity',
        "allocatable": 'allocatable',
        "allocated": 'allocated',
        "ips": 'ips'
    }

    _optionals = [
        'state',
        'conditions',
        'node_info',
        'capacity',
        'allocatable',
        'allocated',
        'ips',
    ]

    def __init__(self,
                 state=APIHelper.SKIP,
                 conditions=APIHelper.SKIP,
                 node_info=APIHelper.SKIP,
                 capacity=APIHelper.SKIP,
                 allocatable=APIHelper.SKIP,
                 allocated=APIHelper.SKIP,
                 ips=APIHelper.SKIP):
        """Constructor for the NodeStatus class"""

        # Initialize members of the class
        if state is not APIHelper.SKIP:
            self.state = state 
        if conditions is not APIHelper.SKIP:
            self.conditions = conditions 
        if node_info is not APIHelper.SKIP:
            self.node_info = node_info 
        if capacity is not APIHelper.SKIP:
            self.capacity = capacity 
        if allocatable is not APIHelper.SKIP:
            self.allocatable = allocatable 
        if allocated is not APIHelper.SKIP:
            self.allocated = allocated 
        if ips is not APIHelper.SKIP:
            self.ips = ips 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        conditions = None
        if dictionary.get('conditions') is not None:
            conditions = [StatusConditionItem.from_dictionary(x) for x in dictionary.get('conditions')]
        else:
            conditions = APIHelper.SKIP
        node_info = NodeStatusInfo.from_dictionary(dictionary.get('nodeInfo')) if 'nodeInfo' in dictionary.keys() else APIHelper.SKIP
        capacity = NodeStatusCapacity.from_dictionary(dictionary.get('capacity')) if 'capacity' in dictionary.keys() else APIHelper.SKIP
        allocatable = NodeStatusAllocatable.from_dictionary(dictionary.get('allocatable')) if 'allocatable' in dictionary.keys() else APIHelper.SKIP
        allocated = NodeStatusAllocated.from_dictionary(dictionary.get('allocated')) if 'allocated' in dictionary.keys() else APIHelper.SKIP
        ips = None
        if dictionary.get('ips') is not None:
            ips = [IP.from_dictionary(x) for x in dictionary.get('ips')]
        else:
            ips = APIHelper.SKIP
        # Return an object of this model
        return cls(state,
                   conditions,
                   node_info,
                   capacity,
                   allocatable,
                   allocated,
                   ips)

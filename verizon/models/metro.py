# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper


class Metro(object):

    """Implementation of the 'Metro' model.

    TODO: type model description here.

    Attributes:
        id (string): TODO: type description here.
        name (string): TODO: type description here.
        created_at (string): TODO: type description here.
        modified_at (string): TODO: type description here.
        latitude (string): TODO: type description here.
        longitude (string): TODO: type description here.
        city (string): TODO: type description here.
        state (string): TODO: type description here.
        country (string): TODO: type description here.
        cc (string): TODO: type description here.
        st (string): TODO: type description here.
        partner_id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'ID',
        "name": 'name',
        "created_at": 'created_at',
        "modified_at": 'modified_at',
        "latitude": 'latitude',
        "longitude": 'longitude',
        "city": 'city',
        "state": 'state',
        "country": 'country',
        "cc": 'cc',
        "st": 'st',
        "partner_id": 'partner_id'
    }

    _optionals = [
        'id',
        'name',
        'created_at',
        'modified_at',
        'latitude',
        'longitude',
        'city',
        'state',
        'country',
        'cc',
        'st',
        'partner_id',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 latitude=APIHelper.SKIP,
                 longitude=APIHelper.SKIP,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 country=APIHelper.SKIP,
                 cc=APIHelper.SKIP,
                 st=APIHelper.SKIP,
                 partner_id=APIHelper.SKIP):
        """Constructor for the Metro class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        if modified_at is not APIHelper.SKIP:
            self.modified_at = modified_at 
        if latitude is not APIHelper.SKIP:
            self.latitude = latitude 
        if longitude is not APIHelper.SKIP:
            self.longitude = longitude 
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if country is not APIHelper.SKIP:
            self.country = country 
        if cc is not APIHelper.SKIP:
            self.cc = cc 
        if st is not APIHelper.SKIP:
            self.st = st 
        if partner_id is not APIHelper.SKIP:
            self.partner_id = partner_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("ID") if dictionary.get("ID") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else APIHelper.SKIP
        modified_at = dictionary.get("modified_at") if dictionary.get("modified_at") else APIHelper.SKIP
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else APIHelper.SKIP
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else APIHelper.SKIP
        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        country = dictionary.get("country") if dictionary.get("country") else APIHelper.SKIP
        cc = dictionary.get("cc") if dictionary.get("cc") else APIHelper.SKIP
        st = dictionary.get("st") if dictionary.get("st") else APIHelper.SKIP
        partner_id = dictionary.get("partner_id") if dictionary.get("partner_id") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   created_at,
                   modified_at,
                   latitude,
                   longitude,
                   city,
                   state,
                   country,
                   cc,
                   st,
                   partner_id)

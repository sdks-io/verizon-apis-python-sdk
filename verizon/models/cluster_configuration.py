# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from verizon.api_helper import APIHelper
from verizon.models.edge_service_launch_params import EdgeServiceLaunchParams
from verizon.models.id_list import IdList


class ClusterConfiguration(object):

    """Implementation of the 'ClusterConfiguration' model.

    TODO: type model description here.

    Attributes:
        tags (EdgeServiceLaunchParams): TODO: type description here.
        end_point_access_type (ClusterConfigEndpointAccessTypeEnum): TODO:
            type description here.
        auto_create_network_infra (bool): TODO: type description here.
        infra_i_pv_4_range (string): TODO: type description here.
        network_nat_mode (NetworkNatModeEnum): TODO: type description here.
        availability_zones (list of IdList): TODO: type description here.
        private_network_infra_ids (list of IdList): TODO: type description
            here.
        public_network_infra_ids (list of IdList): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tags": 'tags',
        "end_point_access_type": 'endPointAccessType',
        "auto_create_network_infra": 'autoCreateNetworkInfra',
        "infra_i_pv_4_range": 'infraIPv4range',
        "network_nat_mode": 'networkNatMode',
        "availability_zones": 'availabilityZones',
        "private_network_infra_ids": 'privateNetworkInfraIds',
        "public_network_infra_ids": 'publicNetworkInfraIds'
    }

    _optionals = [
        'tags',
        'end_point_access_type',
        'auto_create_network_infra',
        'infra_i_pv_4_range',
        'network_nat_mode',
        'availability_zones',
        'private_network_infra_ids',
        'public_network_infra_ids',
    ]

    def __init__(self,
                 tags=APIHelper.SKIP,
                 end_point_access_type='privateAccess',
                 auto_create_network_infra=True,
                 infra_i_pv_4_range='192.168.0.0/16',
                 network_nat_mode='single',
                 availability_zones=APIHelper.SKIP,
                 private_network_infra_ids=APIHelper.SKIP,
                 public_network_infra_ids=APIHelper.SKIP):
        """Constructor for the ClusterConfiguration class"""

        # Initialize members of the class
        if tags is not APIHelper.SKIP:
            self.tags = tags 
        self.end_point_access_type = end_point_access_type 
        self.auto_create_network_infra = auto_create_network_infra 
        self.infra_i_pv_4_range = infra_i_pv_4_range 
        self.network_nat_mode = network_nat_mode 
        if availability_zones is not APIHelper.SKIP:
            self.availability_zones = availability_zones 
        if private_network_infra_ids is not APIHelper.SKIP:
            self.private_network_infra_ids = private_network_infra_ids 
        if public_network_infra_ids is not APIHelper.SKIP:
            self.public_network_infra_ids = public_network_infra_ids 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        tags = EdgeServiceLaunchParams.from_dictionary(dictionary.get('tags')) if 'tags' in dictionary.keys() else APIHelper.SKIP
        end_point_access_type = dictionary.get("endPointAccessType") if dictionary.get("endPointAccessType") else 'privateAccess'
        auto_create_network_infra = dictionary.get("autoCreateNetworkInfra") if dictionary.get("autoCreateNetworkInfra") else True
        infra_i_pv_4_range = dictionary.get("infraIPv4range") if dictionary.get("infraIPv4range") else '192.168.0.0/16'
        network_nat_mode = dictionary.get("networkNatMode") if dictionary.get("networkNatMode") else 'single'
        availability_zones = None
        if dictionary.get('availabilityZones') is not None:
            availability_zones = [IdList.from_dictionary(x) for x in dictionary.get('availabilityZones')]
        else:
            availability_zones = APIHelper.SKIP
        private_network_infra_ids = None
        if dictionary.get('privateNetworkInfraIds') is not None:
            private_network_infra_ids = [IdList.from_dictionary(x) for x in dictionary.get('privateNetworkInfraIds')]
        else:
            private_network_infra_ids = APIHelper.SKIP
        public_network_infra_ids = None
        if dictionary.get('publicNetworkInfraIds') is not None:
            public_network_infra_ids = [IdList.from_dictionary(x) for x in dictionary.get('publicNetworkInfraIds')]
        else:
            public_network_infra_ids = APIHelper.SKIP
        # Return an object of this model
        return cls(tags,
                   end_point_access_type,
                   auto_create_network_infra,
                   infra_i_pv_4_range,
                   network_nat_mode,
                   availability_zones,
                   private_network_infra_ids,
                   public_network_infra_ids)

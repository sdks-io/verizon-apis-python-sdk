# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.authentication.header_auth import HeaderAuth
from apimatic_core.utilities.auth_helper import AuthHelper
from verizon.controllers.oauth_authorization_controller import\
    OauthAuthorizationController


class Oauth2(HeaderAuth):

    @property
    def error_message(self):
        """Display error message on occurrence of authentication failure
        in ClientCredentialsAuth

        """
        return "ClientCredentialsAuth: oauth_token.access_token is undefined or expired."

    def __init__(self, oauth_client_id, oauth_client_secret, oauth_token, config, oauth_scopes=None):
        auth_params = {}
        self._oauth_client_id = oauth_client_id
        self._oauth_client_secret = oauth_client_secret
        self._oauth_token = oauth_token
        self._oauth_scopes = oauth_scopes
        self._o_auth_api = OauthAuthorizationController(config)
        if self._oauth_token:
            auth_params["Authorization"] = "Bearer {}".format(self._oauth_token.access_token)
        super().__init__(auth_params=auth_params)

    def is_valid(self):
        return self._oauth_token and not self.token_expired(self._oauth_token)

    def build_basic_auth_header(self):
        """ Builds the basic auth header for endpoints in the
            OAuth Authorization Controller.

        Returns:
            str: The value of the Authentication header.

        """
        return "Basic {}".format(AuthHelper.get_base64_encoded_value(self._oauth_client_id, self._oauth_client_secret))

    def fetch_token(self, additional_params=None):
        """ Authorizes the client.

            
            additional_params (dict):  Any additional form parameters.

        Returns:
            OAuthToken: The OAuth token.

        """
        token = self._o_auth_api.request_token(
            self.build_basic_auth_header(),
            ' '.join(self._oauth_scopes) if (isinstance(self._oauth_scopes, list)) else self._oauth_scopes,
            additional_params
        ).body
        if hasattr(token, 'expires_in'):
            current_utc_timestamp = AuthHelper.get_current_utc_timestamp()
            token.expiry = AuthHelper.get_token_expiry(current_utc_timestamp, token.expires_in)
        return token

    @staticmethod
    def token_expired(token):
        """ Checks if OAuth token has expired.

        Returns:
            bool: True if token has expired, False otherwise.

        """
        return hasattr(token, 'expiry') and AuthHelper.is_token_expired(token.expiry)
